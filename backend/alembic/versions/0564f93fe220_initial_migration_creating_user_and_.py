"""Initial migration creating User and ImageSubmission tables

Revision ID: 0564f93fe220
Revises: 
Create Date: 2025-03-31 13:37:24.543414

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel # Add missing import
import geoalchemy2 # Add missing import


# revision identifiers, used by Alembic.
revision: str = '0564f93fe220'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable PostGIS extension if it doesn't exist
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis;")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('avatar_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('home_location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('default_radius_km', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('google_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True # Add check
    )
    op.create_index('idx_user_home_location', 'user', ['home_location'], unique=False, postgresql_using='gist', if_not_exists=True)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True, if_not_exists=True)
    op.create_index(op.f('ix_user_google_id'), 'user', ['google_id'], unique=True, if_not_exists=True)
    op.create_table('imagesubmission',
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('thumbs_up_count', sa.Integer(), nullable=False),
    sa.Column('thumbs_down_count', sa.Integer(), nullable=False),
    sa.Column('is_locked', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    if_not_exists=True # Add check
    )
    op.create_index('idx_imagesubmission_location', 'imagesubmission', ['location'], unique=False, postgresql_using='gist', if_not_exists=True)
    op.create_index(op.f('ix_imagesubmission_user_id'), 'imagesubmission', ['user_id'], unique=False, if_not_exists=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Dropping the extension might fail if other objects depend on it.
    # Consider if this is truly necessary for your downgrade path.
    # op.execute("DROP EXTENSION IF EXISTS postgis;")
    op.drop_index(op.f('ix_imagesubmission_user_id'), table_name='imagesubmission')
    op.drop_index('idx_imagesubmission_location', table_name='imagesubmission', postgresql_using='gist')
    op.drop_table('imagesubmission')
    op.drop_index(op.f('ix_user_google_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index('idx_user_home_location', table_name='user', postgresql_using='gist')
    op.drop_table('user')
    # ### end Alembic commands ###
